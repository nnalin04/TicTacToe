private static int possibleBestPosition(List<Integer> position, List<Integer> occupiedPosition, int index,
            PlayingTTT play) {

        List<List<Integer>> winning = winningList();

        // variables to calculate index and count the number of matching element.
        int k = 0;
        List<Integer> unMatched = new ArrayList<>();

        while (k < 8) {
            int matchCount = 0;
            unMatched.clear();
            for (int i = 0; i < winning; i++) {
                if (occupiedPosition.contains(winning.get(i))) {
                    if (position.contains(winning[k][i])) {
                        matchCount++;
                    }
                } else {
                    unMatched.add(winning[k][i]);
                }
            }
            if (matchCount == 2 && unMatched.size() == 1) {
                index = unMatched.get(0);
                break;
            }
            k++;
        }
        return index;
    }

    public List<List<Integer>> winningList(){
        List<Integer> row0 = new ArrayList<>(Arrays.asList(1, 2, 3));
        List<Integer> row1 = new ArrayList<>(Arrays.asList(4, 5, 6));
        List<Integer> row2 = new ArrayList<>(Arrays.asList(7, 8, 9));
        List<Integer> col0 = new ArrayList<>(Arrays.asList(1, 4, 7));
        List<Integer> col1 = new ArrayList<>(Arrays.asList(2, 5, 8));
        List<Integer> col2 = new ArrayList<>(Arrays.asList(3, 6, 9));
        List<Integer> dig0 = new ArrayList<>(Arrays.asList(1, 5, 9));
        List<Integer> dig1 = new ArrayList<>(Arrays.asList(3, 5, 7));

        List<List<Integer>> win = new ArrayList<>();
        win.add(row0);
        win.add(row1);
        win.add(row2);
        win.add(col0);
        win.add(col1);
        win.add(col2);
        win.add(dig0);
        win.add(dig1);
__
        return win;
    }